
LAB_UARTprotocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003924  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b2c  08003b2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b34  08003b34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08003bac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003bac  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080db  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175b  00000000  00000000  0002817b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  000298d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  00029f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158bb  00000000  00000000  0002a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078ec  00000000  00000000  0003fe2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085843  00000000  00000000  00047717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccf5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db4  00000000  00000000  000ccfb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003aac 	.word	0x08003aac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003aac 	.word	0x08003aac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fad6 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f84c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8fe 	bl	8000794 <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 f8dc 	bl	8000754 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f8b0 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, RxBuffer, 32);
 80005a0:	2220      	movs	r2, #32
 80005a2:	491c      	ldr	r1, [pc, #112]	; (8000614 <main+0x8c>)
 80005a4:	481c      	ldr	r0, [pc, #112]	; (8000618 <main+0x90>)
 80005a6:	f001 fecf 	bl	8002348 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Posdata=huart2.RxXferSize-huart2.hdmarx->Instance->NDTR;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <main+0x90>)
 80005ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <main+0x90>)
 80005b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <main+0x94>)
 80005c0:	701a      	strb	r2, [r3, #0]
	  if(Posdata!=Posdatapre ){
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0x94>)
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <main+0x98>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d0ed      	beq.n	80005aa <main+0x22>
		  sprintf(TxDataBuffer, "\r\nReceivedChar:[%c]", RxBuffer[Posdatapre] );
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <main+0x98>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <main+0x8c>)
 80005d6:	5c9b      	ldrb	r3, [r3, r2]
 80005d8:	461a      	mov	r2, r3
 80005da:	4912      	ldr	r1, [pc, #72]	; (8000624 <main+0x9c>)
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <main+0xa0>)
 80005de:	f002 fe37 	bl	8003250 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),500);
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <main+0xa0>)
 80005e4:	f7ff fdfc 	bl	80001e0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005f0:	490d      	ldr	r1, [pc, #52]	; (8000628 <main+0xa0>)
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <main+0x90>)
 80005f4:	f001 fe0f 	bl	8002216 <HAL_UART_Transmit>
		  Posdatapre=(Posdatapre+1)%32;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <main+0x98>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	425a      	negs	r2, r3
 8000600:	f003 031f 	and.w	r3, r3, #31
 8000604:	f002 021f 	and.w	r2, r2, #31
 8000608:	bf58      	it	pl
 800060a:	4253      	negpl	r3, r2
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <main+0x98>)
 8000610:	701a      	strb	r2, [r3, #0]
	  Posdata=huart2.RxXferSize-huart2.hdmarx->Instance->NDTR;
 8000612:	e7ca      	b.n	80005aa <main+0x22>
 8000614:	2000008c 	.word	0x2000008c
 8000618:	2000013c 	.word	0x2000013c
 800061c:	200000ac 	.word	0x200000ac
 8000620:	200000ad 	.word	0x200000ad
 8000624:	08003ac4 	.word	0x08003ac4
 8000628:	200000b0 	.word	0x200000b0

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fe00 	bl	8003240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f8f6 	bl	80018a4 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 f8d9 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fb50 	bl	8001d84 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f8c3 	bl	8000874 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f001 fd20 	bl	800217c <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f897 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000013c 	.word	0x2000013c
 8000750:	40004400 	.word	0x40004400

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_DMA_Init+0x3c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <MX_DMA_Init+0x3c>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_DMA_Init+0x3c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2010      	movs	r0, #16
 800077c:	f000 fb2b 	bl	8000dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000780:	2010      	movs	r0, #16
 8000782:	f000 fb44 	bl	8000e0e <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a2c      	ldr	r2, [pc, #176]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a25      	ldr	r2, [pc, #148]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <MX_GPIO_Init+0xd0>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2120      	movs	r1, #32
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <MX_GPIO_Init+0xd4>)
 8000820:	f001 f826 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_GPIO_Init+0xd8>)
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_GPIO_Init+0xdc>)
 800083a:	f000 fe95 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083e:	2320      	movs	r3, #32
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_GPIO_Init+0xd4>)
 8000856:	f000 fe87 	bl	8001568 <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	10210000 	.word	0x10210000
 8000870:	40020800 	.word	0x40020800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008be:	2007      	movs	r0, #7
 80008c0:	f000 fa7e 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <HAL_UART_MspInit+0xf0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d162      	bne.n	80009b8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <HAL_UART_MspInit+0xf4>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <HAL_UART_MspInit+0xf4>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <HAL_UART_MspInit+0xf4>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <HAL_UART_MspInit+0xf4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <HAL_UART_MspInit+0xf4>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <HAL_UART_MspInit+0xf4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092a:	230c      	movs	r3, #12
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093a:	2307      	movs	r3, #7
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4820      	ldr	r0, [pc, #128]	; (80009c8 <HAL_UART_MspInit+0xf8>)
 8000946:	f000 fe0f 	bl	8001568 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <HAL_UART_MspInit+0xfc>)
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <HAL_UART_MspInit+0x100>)
 800094e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_UART_MspInit+0xfc>)
 8000952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000956:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_UART_MspInit+0xfc>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_UART_MspInit+0xfc>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_UART_MspInit+0xfc>)
 8000966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_UART_MspInit+0xfc>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_UART_MspInit+0xfc>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_UART_MspInit+0xfc>)
 800097a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800097e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_UART_MspInit+0xfc>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_UART_MspInit+0xfc>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800098c:	480f      	ldr	r0, [pc, #60]	; (80009cc <HAL_UART_MspInit+0xfc>)
 800098e:	f000 fa59 	bl	8000e44 <HAL_DMA_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000998:	f7ff ff6c 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <HAL_UART_MspInit+0xfc>)
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_UART_MspInit+0xfc>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2026      	movs	r0, #38	; 0x26
 80009ae:	f000 fa12 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009b2:	2026      	movs	r0, #38	; 0x26
 80009b4:	f000 fa2b 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	200000dc 	.word	0x200000dc
 80009d0:	40026088 	.word	0x40026088

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f8de 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <DMA1_Stream5_IRQHandler+0x10>)
 8000a2e:	f000 fb31 	bl	8001094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000dc 	.word	0x200000dc

08000a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USART2_IRQHandler+0x10>)
 8000a42:	f001 fd01 	bl	8002448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000013c 	.word	0x2000013c

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f002 fbb4 	bl	80031ec <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20020000 	.word	0x20020000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	200000d0 	.word	0x200000d0
 8000ab8:	20000190 	.word	0x20000190

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SystemInit+0x28>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <SystemInit+0x28>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SystemInit+0x28>)
 8000ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aee:	e003      	b.n	8000af8 <LoopCopyDataInit>

08000af0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000af2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000af4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000af6:	3104      	adds	r1, #4

08000af8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000afc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000afe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b00:	d3f6      	bcc.n	8000af0 <CopyDataInit>
  ldr  r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b04:	e002      	b.n	8000b0c <LoopFillZerobss>

08000b06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b08:	f842 3b04 	str.w	r3, [r2], #4

08000b0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b10:	d3f9      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b12:	f7ff ffd3 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f002 fb6f 	bl	80031f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fd35 	bl	8000588 <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b24:	08003b3c 	.word	0x08003b3c
  ldr  r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b2c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b30:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b34:	20000190 	.word	0x20000190

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_Init+0x40>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_Init+0x40>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x40>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f92b 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe86 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f943 	bl	8000e2a <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f90b 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	2000017c 	.word	0x2000017c

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	2000017c 	.word	0x2000017c

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff29 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff3e 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff31 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff feda 	bl	8000c08 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e099      	b.n	8000f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e80:	e00f      	b.n	8000ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e82:	f7ff fec1 	bl	8000c08 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d908      	bls.n	8000ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e078      	b.n	8000f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e8      	bne.n	8000e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <HAL_DMA_Init+0x158>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d107      	bne.n	8000f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4313      	orrs	r3, r2
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f023 0307 	bic.w	r3, r3, #7
 8000f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d117      	bne.n	8000f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00e      	beq.n	8000f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fa91 	bl	8001470 <DMA_CheckFifoParam>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2240      	movs	r2, #64	; 0x40
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f62:	2301      	movs	r3, #1
 8000f64:	e016      	b.n	8000f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fa48 	bl	8001404 <DMA_CalcBaseAndBitshift>
 8000f74:	4603      	mov	r3, r0
 8000f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7c:	223f      	movs	r2, #63	; 0x3f
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	f010803f 	.word	0xf010803f

08000fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_DMA_Start_IT+0x26>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e040      	b.n	8001048 <HAL_DMA_Start_IT+0xa8>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d12f      	bne.n	800103a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2202      	movs	r2, #2
 8000fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 f9da 	bl	80013a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	223f      	movs	r2, #63	; 0x3f
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0216 	orr.w	r2, r2, #22
 800100e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0208 	orr.w	r2, r2, #8
 8001026:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e005      	b.n	8001046 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001042:	2302      	movs	r3, #2
 8001044:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001046:	7dfb      	ldrb	r3, [r7, #23]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d004      	beq.n	800106e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00c      	b.n	8001088 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2205      	movs	r2, #5
 8001072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010a0:	4b92      	ldr	r3, [pc, #584]	; (80012ec <HAL_DMA_IRQHandler+0x258>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a92      	ldr	r2, [pc, #584]	; (80012f0 <HAL_DMA_IRQHandler+0x25c>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0a9b      	lsrs	r3, r3, #10
 80010ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010be:	2208      	movs	r2, #8
 80010c0:	409a      	lsls	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01a      	beq.n	8001100 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0204 	bic.w	r2, r2, #4
 80010e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	2208      	movs	r2, #8
 80010ee:	409a      	lsls	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	2201      	movs	r2, #1
 8001106:	409a      	lsls	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d012      	beq.n	8001136 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00b      	beq.n	8001136 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001122:	2201      	movs	r2, #1
 8001124:	409a      	lsls	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112e:	f043 0202 	orr.w	r2, r3, #2
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113a:	2204      	movs	r2, #4
 800113c:	409a      	lsls	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d012      	beq.n	800116c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00b      	beq.n	800116c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001158:	2204      	movs	r2, #4
 800115a:	409a      	lsls	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001164:	f043 0204 	orr.w	r2, r3, #4
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001170:	2210      	movs	r2, #16
 8001172:	409a      	lsls	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4013      	ands	r3, r2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d043      	beq.n	8001204 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d03c      	beq.n	8001204 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118e:	2210      	movs	r2, #16
 8001190:	409a      	lsls	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d108      	bne.n	80011c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d024      	beq.n	8001204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
 80011c2:	e01f      	b.n	8001204 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01b      	beq.n	8001204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	4798      	blx	r3
 80011d4:	e016      	b.n	8001204 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d107      	bne.n	80011f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0208 	bic.w	r2, r2, #8
 80011f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	2220      	movs	r2, #32
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 808e 	beq.w	8001332 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8086 	beq.w	8001332 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122a:	2220      	movs	r2, #32
 800122c:	409a      	lsls	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b05      	cmp	r3, #5
 800123c:	d136      	bne.n	80012ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0216 	bic.w	r2, r2, #22
 800124c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	695a      	ldr	r2, [r3, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800125c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <HAL_DMA_IRQHandler+0x1da>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0208 	bic.w	r2, r2, #8
 800127c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001282:	223f      	movs	r2, #63	; 0x3f
 8001284:	409a      	lsls	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d07d      	beq.n	800139e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	4798      	blx	r3
        }
        return;
 80012aa:	e078      	b.n	800139e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d01c      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d108      	bne.n	80012da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d030      	beq.n	8001332 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	4798      	blx	r3
 80012d8:	e02b      	b.n	8001332 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d027      	beq.n	8001332 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	4798      	blx	r3
 80012ea:	e022      	b.n	8001332 <HAL_DMA_IRQHandler+0x29e>
 80012ec:	20000000 	.word	0x20000000
 80012f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10f      	bne.n	8001322 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0210 	bic.w	r2, r2, #16
 8001310:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	2b00      	cmp	r3, #0
 8001338:	d032      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d022      	beq.n	800138c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3301      	adds	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	429a      	cmp	r2, r3
 8001368:	d307      	bcc.n	800137a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f2      	bne.n	800135e <HAL_DMA_IRQHandler+0x2ca>
 8001378:	e000      	b.n	800137c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800137a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	4798      	blx	r3
 800139c:	e000      	b.n	80013a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800139e:	bf00      	nop
    }
  }
}
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop

080013a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b40      	cmp	r3, #64	; 0x40
 80013d4:	d108      	bne.n	80013e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013e6:	e007      	b.n	80013f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	60da      	str	r2, [r3, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3b10      	subs	r3, #16
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <DMA_CalcBaseAndBitshift+0x64>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <DMA_CalcBaseAndBitshift+0x68>)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d909      	bls.n	8001446 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	1d1a      	adds	r2, r3, #4
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	659a      	str	r2, [r3, #88]	; 0x58
 8001444:	e007      	b.n	8001456 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	aaaaaaab 	.word	0xaaaaaaab
 800146c:	08003af0 	.word	0x08003af0

08001470 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d11f      	bne.n	80014ca <DMA_CheckFifoParam+0x5a>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d856      	bhi.n	800153e <DMA_CheckFifoParam+0xce>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <DMA_CheckFifoParam+0x28>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014bb 	.word	0x080014bb
 80014a0:	080014a9 	.word	0x080014a9
 80014a4:	0800153f 	.word	0x0800153f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d046      	beq.n	8001542 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b8:	e043      	b.n	8001542 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014c2:	d140      	bne.n	8001546 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014c8:	e03d      	b.n	8001546 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d2:	d121      	bne.n	8001518 <DMA_CheckFifoParam+0xa8>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d837      	bhi.n	800154a <DMA_CheckFifoParam+0xda>
 80014da:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <DMA_CheckFifoParam+0x70>)
 80014dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e0:	080014f1 	.word	0x080014f1
 80014e4:	080014f7 	.word	0x080014f7
 80014e8:	080014f1 	.word	0x080014f1
 80014ec:	08001509 	.word	0x08001509
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
      break;
 80014f4:	e030      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d025      	beq.n	800154e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001506:	e022      	b.n	800154e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001510:	d11f      	bne.n	8001552 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001516:	e01c      	b.n	8001552 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d903      	bls.n	8001526 <DMA_CheckFifoParam+0xb6>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d003      	beq.n	800152c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001524:	e018      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
      break;
 800152a:	e015      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00e      	beq.n	8001556 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
      break;
 800153c:	e00b      	b.n	8001556 <DMA_CheckFifoParam+0xe6>
      break;
 800153e:	bf00      	nop
 8001540:	e00a      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
      break;
 8001542:	bf00      	nop
 8001544:	e008      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
      break;
 8001546:	bf00      	nop
 8001548:	e006      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
      break;
 800154a:	bf00      	nop
 800154c:	e004      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
      break;
 800154e:	bf00      	nop
 8001550:	e002      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
      break;   
 8001552:	bf00      	nop
 8001554:	e000      	b.n	8001558 <DMA_CheckFifoParam+0xe8>
      break;
 8001556:	bf00      	nop
    }
  } 
  
  return status; 
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e159      	b.n	8001838 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 8148 	bne.w	8001832 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d00b      	beq.n	80015c2 <HAL_GPIO_Init+0x5a>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b6:	2b11      	cmp	r3, #17
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d130      	bne.n	8001624 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 0201 	and.w	r2, r3, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0xfc>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a2 	beq.w	8001832 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b57      	ldr	r3, [pc, #348]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a56      	ldr	r2, [pc, #344]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b54      	ldr	r3, [pc, #336]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170a:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_GPIO_Init+0x2ec>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a49      	ldr	r2, [pc, #292]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d019      	beq.n	800176a <HAL_GPIO_Init+0x202>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a48      	ldr	r2, [pc, #288]	; (800185c <HAL_GPIO_Init+0x2f4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x1fe>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a47      	ldr	r2, [pc, #284]	; (8001860 <HAL_GPIO_Init+0x2f8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a46      	ldr	r2, [pc, #280]	; (8001864 <HAL_GPIO_Init+0x2fc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x1f6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a45      	ldr	r2, [pc, #276]	; (8001868 <HAL_GPIO_Init+0x300>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x1f2>
 8001756:	2304      	movs	r3, #4
 8001758:	e008      	b.n	800176c <HAL_GPIO_Init+0x204>
 800175a:	2307      	movs	r3, #7
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x204>
 800175e:	2303      	movs	r3, #3
 8001760:	e004      	b.n	800176c <HAL_GPIO_Init+0x204>
 8001762:	2302      	movs	r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x204>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x204>
 800176a:	2300      	movs	r3, #0
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f002 0203 	and.w	r2, r2, #3
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	4093      	lsls	r3, r2
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800177c:	4935      	ldr	r1, [pc, #212]	; (8001854 <HAL_GPIO_Init+0x2ec>)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_GPIO_Init+0x304>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ae:	4a2f      	ldr	r2, [pc, #188]	; (800186c <HAL_GPIO_Init+0x304>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_GPIO_Init+0x304>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d8:	4a24      	ldr	r2, [pc, #144]	; (800186c <HAL_GPIO_Init+0x304>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_GPIO_Init+0x304>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_GPIO_Init+0x304>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_GPIO_Init+0x304>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_GPIO_Init+0x304>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3301      	adds	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	f67f aea2 	bls.w	8001584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40013800 	.word	0x40013800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400
 8001860:	40020800 	.word	0x40020800
 8001864:	40020c00 	.word	0x40020c00
 8001868:	40021000 	.word	0x40021000
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e25b      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d075      	beq.n	80019ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c2:	4ba3      	ldr	r3, [pc, #652]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d00c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ce:	4ba0      	ldr	r3, [pc, #640]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d112      	bne.n	8001900 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	4b9d      	ldr	r3, [pc, #628]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e6:	d10b      	bne.n	8001900 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	4b99      	ldr	r3, [pc, #612]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d05b      	beq.n	80019ac <HAL_RCC_OscConfig+0x108>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d157      	bne.n	80019ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e236      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d106      	bne.n	8001918 <HAL_RCC_OscConfig+0x74>
 800190a:	4b91      	ldr	r3, [pc, #580]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a90      	ldr	r2, [pc, #576]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e01d      	b.n	8001954 <HAL_RCC_OscConfig+0xb0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x98>
 8001922:	4b8b      	ldr	r3, [pc, #556]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a8a      	ldr	r2, [pc, #552]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a87      	ldr	r2, [pc, #540]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0xb0>
 800193c:	4b84      	ldr	r3, [pc, #528]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a83      	ldr	r2, [pc, #524]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a80      	ldr	r2, [pc, #512]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff f954 	bl	8000c08 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff f950 	bl	8000c08 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1fb      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0xc0>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f940 	bl	8000c08 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f93c 	bl	8000c08 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1e7      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	4b6c      	ldr	r3, [pc, #432]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0xe8>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d063      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ba:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c6:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d11c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d2:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d116      	bne.n	8001a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_RCC_OscConfig+0x152>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e1bb      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4952      	ldr	r1, [pc, #328]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	e03a      	b.n	8001a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a14:	4b4f      	ldr	r3, [pc, #316]	; (8001b54 <HAL_RCC_OscConfig+0x2b0>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f8f5 	bl	8000c08 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff f8f1 	bl	8000c08 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e19c      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4940      	ldr	r1, [pc, #256]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e015      	b.n	8001a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a56:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <HAL_RCC_OscConfig+0x2b0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f8d4 	bl	8000c08 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff f8d0 	bl	8000c08 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e17b      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d030      	beq.n	8001af0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d016      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_RCC_OscConfig+0x2b4>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f8b4 	bl	8000c08 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f8b0 	bl	8000c08 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e15b      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x200>
 8001ac2:	e015      	b.n	8001af0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_RCC_OscConfig+0x2b4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aca:	f7ff f89d 	bl	8000c08 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f899 	bl	8000c08 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e144      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80a0 	beq.w	8001c3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_OscConfig+0x2b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d121      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_RCC_OscConfig+0x2b8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_RCC_OscConfig+0x2b8>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff f85f 	bl	8000c08 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e011      	b.n	8001b72 <HAL_RCC_OscConfig+0x2ce>
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	42470000 	.word	0x42470000
 8001b58:	42470e80 	.word	0x42470e80
 8001b5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b60:	f7ff f852 	bl	8000c08 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e0fd      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_OscConfig+0x4d4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2f0>
 8001b86:	4b7d      	ldr	r3, [pc, #500]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a7c      	ldr	r2, [pc, #496]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	e01c      	b.n	8001bce <HAL_RCC_OscConfig+0x32a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x312>
 8001b9c:	4b77      	ldr	r3, [pc, #476]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a76      	ldr	r2, [pc, #472]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	4a73      	ldr	r2, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x32a>
 8001bb6:	4b71      	ldr	r3, [pc, #452]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a70      	ldr	r2, [pc, #448]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	4b6e      	ldr	r3, [pc, #440]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a6d      	ldr	r2, [pc, #436]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f817 	bl	8000c08 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff f813 	bl	8000c08 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0bc      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ee      	beq.n	8001bde <HAL_RCC_OscConfig+0x33a>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff f801 	bl	8000c08 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7fe fffd 	bl	8000c08 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0a6      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c32:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8092 	beq.w	8001d6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d05c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d141      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <HAL_RCC_OscConfig+0x4dc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe ffd1 	bl	8000c08 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe ffcd 	bl	8000c08 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e078      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	019b      	lsls	r3, r3, #6
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	061b      	lsls	r3, r3, #24
 8001cac:	4933      	ldr	r1, [pc, #204]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_OscConfig+0x4dc>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ffa6 	bl	8000c08 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7fe ffa2 	bl	8000c08 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e04d      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x41c>
 8001cde:	e045      	b.n	8001d6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x4dc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe ff8f 	bl	8000c08 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe ff8b 	bl	8000c08 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e036      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x44a>
 8001d0c:	e02e      	b.n	8001d6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e029      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_RCC_OscConfig+0x4d8>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d115      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d10d      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	42470060 	.word	0x42470060

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0cc      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d90c      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d044      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d119      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e067      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4934      	ldr	r1, [pc, #208]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7fe fec8 	bl	8000c08 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7fe fec4 	bl	8000c08 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e04f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d20c      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fe28 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08003ad8 	.word	0x08003ad8
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	2300      	movs	r3, #0
 8001f62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f68:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d00d      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x40>
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	f200 80bd 	bhi.w	80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f82:	e0b7      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f86:	60bb      	str	r3, [r7, #8]
       break;
 8001f88:	e0b7      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8a:	4b61      	ldr	r3, [pc, #388]	; (8002110 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f8c:	60bb      	str	r3, [r7, #8]
      break;
 8001f8e:	e0b4      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f90:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9a:	4b5b      	ldr	r3, [pc, #364]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d04d      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa6:	4b58      	ldr	r3, [pc, #352]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	461a      	mov	r2, r3
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	ea02 0800 	and.w	r8, r2, r0
 8001fbe:	ea03 0901 	and.w	r9, r3, r1
 8001fc2:	4640      	mov	r0, r8
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	014b      	lsls	r3, r1, #5
 8001fd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fd4:	0142      	lsls	r2, r0, #5
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	ebb0 0008 	subs.w	r0, r0, r8
 8001fde:	eb61 0109 	sbc.w	r1, r1, r9
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	018b      	lsls	r3, r1, #6
 8001fec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff0:	0182      	lsls	r2, r0, #6
 8001ff2:	1a12      	subs	r2, r2, r0
 8001ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff8:	f04f 0000 	mov.w	r0, #0
 8001ffc:	f04f 0100 	mov.w	r1, #0
 8002000:	00d9      	lsls	r1, r3, #3
 8002002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002006:	00d0      	lsls	r0, r2, #3
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	eb12 0208 	adds.w	r2, r2, r8
 8002010:	eb43 0309 	adc.w	r3, r3, r9
 8002014:	f04f 0000 	mov.w	r0, #0
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	0259      	lsls	r1, r3, #9
 800201e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002022:	0250      	lsls	r0, r2, #9
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	461a      	mov	r2, r3
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	f7fe f92c 	bl	8000290 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e04a      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	461a      	mov	r2, r3
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	ea02 0400 	and.w	r4, r2, r0
 800205a:	ea03 0501 	and.w	r5, r3, r1
 800205e:	4620      	mov	r0, r4
 8002060:	4629      	mov	r1, r5
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	014b      	lsls	r3, r1, #5
 800206c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002070:	0142      	lsls	r2, r0, #5
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	1b00      	subs	r0, r0, r4
 8002078:	eb61 0105 	sbc.w	r1, r1, r5
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	018b      	lsls	r3, r1, #6
 8002086:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800208a:	0182      	lsls	r2, r0, #6
 800208c:	1a12      	subs	r2, r2, r0
 800208e:	eb63 0301 	sbc.w	r3, r3, r1
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	00d9      	lsls	r1, r3, #3
 800209c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020a0:	00d0      	lsls	r0, r2, #3
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	1912      	adds	r2, r2, r4
 80020a8:	eb45 0303 	adc.w	r3, r5, r3
 80020ac:	f04f 0000 	mov.w	r0, #0
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	0299      	lsls	r1, r3, #10
 80020b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020ba:	0290      	lsls	r0, r2, #10
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f7fe f8e0 	bl	8000290 <__aeabi_uldivmod>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4613      	mov	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	3301      	adds	r3, #1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	60bb      	str	r3, [r7, #8]
      break;
 80020f2:	e002      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020f6:	60bb      	str	r3, [r7, #8]
      break;
 80020f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fa:	68bb      	ldr	r3, [r7, #8]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	00f42400 	.word	0x00f42400
 8002110:	007a1200 	.word	0x007a1200

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCC_GetHCLKFreq+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002130:	f7ff fff0 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a9b      	lsrs	r3, r3, #10
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4903      	ldr	r1, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	08003ae8 	.word	0x08003ae8

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002158:	f7ff ffdc 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0b5b      	lsrs	r3, r3, #13
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	08003ae8 	.word	0x08003ae8

0800217c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e03f      	b.n	800220e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fb94 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	; 0x24
 80021ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fc77 	bl	8002ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b088      	sub	sp, #32
 800221a:	af02      	add	r7, sp, #8
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	f040 8083 	bne.w	800233e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_UART_Transmit+0x2e>
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e07b      	b.n	8002340 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_UART_Transmit+0x40>
 8002252:	2302      	movs	r3, #2
 8002254:	e074      	b.n	8002340 <HAL_UART_Transmit+0x12a>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2221      	movs	r2, #33	; 0x21
 8002268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800226c:	f7fe fccc 	bl	8000c08 <HAL_GetTick>
 8002270:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002286:	e042      	b.n	800230e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229e:	d122      	bne.n	80022e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2200      	movs	r2, #0
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fa80 	bl	80027b0 <UART_WaitOnFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e042      	b.n	8002340 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3302      	adds	r3, #2
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	e017      	b.n	800230e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	e013      	b.n	800230e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fa5d 	bl	80027b0 <UART_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e01f      	b.n	8002340 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	60ba      	str	r2, [r7, #8]
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1b7      	bne.n	8002288 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2200      	movs	r2, #0
 8002320:	2140      	movs	r1, #64	; 0x40
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fa44 	bl	80027b0 <UART_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e006      	b.n	8002340 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b20      	cmp	r3, #32
 8002360:	d166      	bne.n	8002430 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_UART_Receive_DMA+0x26>
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e05f      	b.n	8002432 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_UART_Receive_DMA+0x38>
 800237c:	2302      	movs	r3, #2
 800237e:	e058      	b.n	8002432 <HAL_UART_Receive_DMA+0xea>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2222      	movs	r2, #34	; 0x22
 800239e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	4a25      	ldr	r2, [pc, #148]	; (800243c <HAL_UART_Receive_DMA+0xf4>)
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_UART_Receive_DMA+0xf8>)
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	4a23      	ldr	r2, [pc, #140]	; (8002444 <HAL_UART_Receive_DMA+0xfc>)
 80023b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	2200      	movs	r2, #0
 80023c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3304      	adds	r3, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	f7fe fde1 	bl	8000fa0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	08002699 	.word	0x08002699
 8002440:	08002701 	.word	0x08002701
 8002444:	0800271d 	.word	0x0800271d

08002448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_UART_IRQHandler+0x52>
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fa8c 	bl	80029b0 <UART_Receive_IT>
      return;
 8002498:	e0d0      	b.n	800263c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80b0 	beq.w	8002602 <HAL_UART_IRQHandler+0x1ba>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_UART_IRQHandler+0x70>
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80a5 	beq.w	8002602 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_UART_IRQHandler+0x90>
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_UART_IRQHandler+0xb0>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	f043 0202 	orr.w	r2, r3, #2
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_UART_IRQHandler+0xd0>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00f      	beq.n	8002542 <HAL_UART_IRQHandler+0xfa>
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d104      	bne.n	8002536 <HAL_UART_IRQHandler+0xee>
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	f043 0208 	orr.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d077      	beq.n	800263a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_UART_IRQHandler+0x11c>
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa26 	bl	80029b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <HAL_UART_IRQHandler+0x144>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d031      	beq.n	80025f0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f96f 	bl	8002870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d123      	bne.n	80025e8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_UART_IRQHandler+0x1fc>)
 80025be:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fd43 	bl	8001050 <HAL_DMA_Abort_IT>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d016      	beq.n	80025fe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025da:	4610      	mov	r0, r2
 80025dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025de:	e00e      	b.n	80025fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f84f 	bl	8002684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e6:	e00a      	b.n	80025fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f84b 	bl	8002684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ee:	e006      	b.n	80025fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f847 	bl	8002684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80025fc:	e01d      	b.n	800263a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fe:	bf00      	nop
    return;
 8002600:	e01b      	b.n	800263a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_UART_IRQHandler+0x1d6>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f95c 	bl	80028d4 <UART_Transmit_IT>
    return;
 800261c:	e00e      	b.n	800263c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_UART_IRQHandler+0x1f4>
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f9a4 	bl	8002980 <UART_EndTransmit_IT>
    return;
 8002638:	e000      	b.n	800263c <HAL_UART_IRQHandler+0x1f4>
    return;
 800263a:	bf00      	nop
  }
}
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	080028ad 	.word	0x080028ad

08002648 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11e      	bne.n	80026f2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ffb2 	bl	800265c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff ffae 	bl	8002670 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	2b80      	cmp	r3, #128	; 0x80
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b21      	cmp	r3, #33	; 0x21
 800274e:	d108      	bne.n	8002762 <UART_DMAError+0x46>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f000 f871 	bl	8002844 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b22      	cmp	r3, #34	; 0x22
 8002782:	d108      	bne.n	8002796 <UART_DMAError+0x7a>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002790:	68b8      	ldr	r0, [r7, #8]
 8002792:	f000 f86d 	bl	8002870 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027a2:	68b8      	ldr	r0, [r7, #8]
 80027a4:	f7ff ff6e 	bl	8002684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c0:	e02c      	b.n	800281c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d028      	beq.n	800281c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80027d0:	f7fe fa1a 	bl	8000c08 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d21d      	bcs.n	800281c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e00f      	b.n	800283c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4013      	ands	r3, r2
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	429a      	cmp	r2, r3
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	429a      	cmp	r2, r3
 8002838:	d0c3      	beq.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800285a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002886:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fedc 	bl	8002684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b21      	cmp	r3, #33	; 0x21
 80028e6:	d144      	bne.n	8002972 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f0:	d11a      	bne.n	8002928 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002906:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	1c9a      	adds	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	621a      	str	r2, [r3, #32]
 800291a:	e00e      	b.n	800293a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]
 8002926:	e008      	b.n	800293a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	1c59      	adds	r1, r3, #1
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6211      	str	r1, [r2, #32]
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29b      	uxth	r3, r3
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4619      	mov	r1, r3
 8002948:	84d1      	strh	r1, [r2, #38]	; 0x26
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10f      	bne.n	800296e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800296c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002996:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fe51 	bl	8002648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b22      	cmp	r3, #34	; 0x22
 80029c2:	d171      	bne.n	8002aa8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	d123      	bne.n	8002a16 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10e      	bne.n	80029fa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	1c9a      	adds	r2, r3, #2
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
 80029f8:	e029      	b.n	8002a4e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
 8002a14:	e01b      	b.n	8002a4e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6858      	ldr	r0, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	1c59      	adds	r1, r3, #1
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6291      	str	r1, [r2, #40]	; 0x28
 8002a2e:	b2c2      	uxtb	r2, r0
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e00c      	b.n	8002a4e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	1c58      	adds	r0, r3, #1
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	6288      	str	r0, [r1, #40]	; 0x28
 8002a46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d120      	bne.n	8002aa4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0220 	bic.w	r2, r2, #32
 8002a70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff fdde 	bl	800265c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e002      	b.n	8002aaa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab8:	b0bd      	sub	sp, #244	; 0xf4
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	ea40 0301 	orr.w	r3, r0, r1
 8002adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b0c:	f021 010c 	bic.w	r1, r1, #12
 8002b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2e:	6999      	ldr	r1, [r3, #24]
 8002b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	ea40 0301 	orr.w	r3, r0, r1
 8002b3a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b46:	f040 81a5 	bne.w	8002e94 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4bcd      	ldr	r3, [pc, #820]	; (8002e88 <UART_SetConfig+0x3d4>)
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d006      	beq.n	8002b64 <UART_SetConfig+0xb0>
 8002b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4bcb      	ldr	r3, [pc, #812]	; (8002e8c <UART_SetConfig+0x3d8>)
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	f040 80cb 	bne.w	8002cfa <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b64:	f7ff faf6 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8002b68:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b70:	461c      	mov	r4, r3
 8002b72:	f04f 0500 	mov.w	r5, #0
 8002b76:	4622      	mov	r2, r4
 8002b78:	462b      	mov	r3, r5
 8002b7a:	1891      	adds	r1, r2, r2
 8002b7c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002b80:	415b      	adcs	r3, r3
 8002b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b86:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b8a:	1912      	adds	r2, r2, r4
 8002b8c:	eb45 0303 	adc.w	r3, r5, r3
 8002b90:	f04f 0000 	mov.w	r0, #0
 8002b94:	f04f 0100 	mov.w	r1, #0
 8002b98:	00d9      	lsls	r1, r3, #3
 8002b9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b9e:	00d0      	lsls	r0, r2, #3
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	1911      	adds	r1, r2, r4
 8002ba6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002baa:	416b      	adcs	r3, r5
 8002bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	1891      	adds	r1, r2, r2
 8002bbe:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002bc2:	415b      	adcs	r3, r3
 8002bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bc8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002bcc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002bd0:	f7fd fb5e 	bl	8000290 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4bad      	ldr	r3, [pc, #692]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002bda:	fba3 2302 	umull	r2, r3, r3, r2
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	011e      	lsls	r6, r3, #4
 8002be2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002be6:	461c      	mov	r4, r3
 8002be8:	f04f 0500 	mov.w	r5, #0
 8002bec:	4622      	mov	r2, r4
 8002bee:	462b      	mov	r3, r5
 8002bf0:	1891      	adds	r1, r2, r2
 8002bf2:	67b9      	str	r1, [r7, #120]	; 0x78
 8002bf4:	415b      	adcs	r3, r3
 8002bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bf8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002bfc:	1912      	adds	r2, r2, r4
 8002bfe:	eb45 0303 	adc.w	r3, r5, r3
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	00d9      	lsls	r1, r3, #3
 8002c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c10:	00d0      	lsls	r0, r2, #3
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	1911      	adds	r1, r2, r4
 8002c18:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002c1c:	416b      	adcs	r3, r5
 8002c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	1891      	adds	r1, r2, r2
 8002c30:	6739      	str	r1, [r7, #112]	; 0x70
 8002c32:	415b      	adcs	r3, r3
 8002c34:	677b      	str	r3, [r7, #116]	; 0x74
 8002c36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c3a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002c3e:	f7fd fb27 	bl	8000290 <__aeabi_uldivmod>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4b92      	ldr	r3, [pc, #584]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002c48:	fba3 1302 	umull	r1, r3, r3, r2
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	2164      	movs	r1, #100	; 0x64
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	3332      	adds	r3, #50	; 0x32
 8002c5a:	4a8d      	ldr	r2, [pc, #564]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c68:	441e      	add	r6, r3
 8002c6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	1894      	adds	r4, r2, r2
 8002c7a:	66bc      	str	r4, [r7, #104]	; 0x68
 8002c7c:	415b      	adcs	r3, r3
 8002c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002c84:	1812      	adds	r2, r2, r0
 8002c86:	eb41 0303 	adc.w	r3, r1, r3
 8002c8a:	f04f 0400 	mov.w	r4, #0
 8002c8e:	f04f 0500 	mov.w	r5, #0
 8002c92:	00dd      	lsls	r5, r3, #3
 8002c94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c98:	00d4      	lsls	r4, r2, #3
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	462b      	mov	r3, r5
 8002c9e:	1814      	adds	r4, r2, r0
 8002ca0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8002ca4:	414b      	adcs	r3, r1
 8002ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	1891      	adds	r1, r2, r2
 8002cb8:	6639      	str	r1, [r7, #96]	; 0x60
 8002cba:	415b      	adcs	r3, r3
 8002cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cbe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002cc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cc6:	f7fd fae3 	bl	8000290 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	2164      	movs	r1, #100	; 0x64
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3332      	adds	r3, #50	; 0x32
 8002ce2:	4a6b      	ldr	r2, [pc, #428]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	f003 0207 	and.w	r2, r3, #7
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4432      	add	r2, r6
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	e26d      	b.n	80031d6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7ff fa17 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002cfe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d06:	461c      	mov	r4, r3
 8002d08:	f04f 0500 	mov.w	r5, #0
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	462b      	mov	r3, r5
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d14:	415b      	adcs	r3, r3
 8002d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d1c:	1912      	adds	r2, r2, r4
 8002d1e:	eb45 0303 	adc.w	r3, r5, r3
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	00d9      	lsls	r1, r3, #3
 8002d2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d30:	00d0      	lsls	r0, r2, #3
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	1911      	adds	r1, r2, r4
 8002d38:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002d3c:	416b      	adcs	r3, r5
 8002d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	1891      	adds	r1, r2, r2
 8002d50:	6539      	str	r1, [r7, #80]	; 0x50
 8002d52:	415b      	adcs	r3, r3
 8002d54:	657b      	str	r3, [r7, #84]	; 0x54
 8002d56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d5a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002d5e:	f7fd fa97 	bl	8000290 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002d68:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	011e      	lsls	r6, r3, #4
 8002d70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d74:	461c      	mov	r4, r3
 8002d76:	f04f 0500 	mov.w	r5, #0
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	1891      	adds	r1, r2, r2
 8002d80:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d82:	415b      	adcs	r3, r3
 8002d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d8a:	1912      	adds	r2, r2, r4
 8002d8c:	eb45 0303 	adc.w	r3, r5, r3
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	00d9      	lsls	r1, r3, #3
 8002d9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d9e:	00d0      	lsls	r0, r2, #3
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	1911      	adds	r1, r2, r4
 8002da6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002daa:	416b      	adcs	r3, r5
 8002dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	1891      	adds	r1, r2, r2
 8002dbe:	6439      	str	r1, [r7, #64]	; 0x40
 8002dc0:	415b      	adcs	r3, r3
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dc8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002dcc:	f7fd fa60 	bl	8000290 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2164      	movs	r1, #100	; 0x64
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	3332      	adds	r3, #50	; 0x32
 8002de8:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df6:	441e      	add	r6, r3
 8002df8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	1894      	adds	r4, r2, r2
 8002e08:	63bc      	str	r4, [r7, #56]	; 0x38
 8002e0a:	415b      	adcs	r3, r3
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e12:	1812      	adds	r2, r2, r0
 8002e14:	eb41 0303 	adc.w	r3, r1, r3
 8002e18:	f04f 0400 	mov.w	r4, #0
 8002e1c:	f04f 0500 	mov.w	r5, #0
 8002e20:	00dd      	lsls	r5, r3, #3
 8002e22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e26:	00d4      	lsls	r4, r2, #3
 8002e28:	4622      	mov	r2, r4
 8002e2a:	462b      	mov	r3, r5
 8002e2c:	1814      	adds	r4, r2, r0
 8002e2e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8002e32:	414b      	adcs	r3, r1
 8002e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	1891      	adds	r1, r2, r2
 8002e46:	6339      	str	r1, [r7, #48]	; 0x30
 8002e48:	415b      	adcs	r3, r3
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e50:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e54:	f7fd fa1c 	bl	8000290 <__aeabi_uldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2164      	movs	r1, #100	; 0x64
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	3332      	adds	r3, #50	; 0x32
 8002e70:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <UART_SetConfig+0x3dc>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	f003 0207 	and.w	r2, r3, #7
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4432      	add	r2, r6
 8002e84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002e86:	e1a6      	b.n	80031d6 <UART_SetConfig+0x722>
 8002e88:	40011000 	.word	0x40011000
 8002e8c:	40011400 	.word	0x40011400
 8002e90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4bd1      	ldr	r3, [pc, #836]	; (80031e0 <UART_SetConfig+0x72c>)
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d006      	beq.n	8002eae <UART_SetConfig+0x3fa>
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4bcf      	ldr	r3, [pc, #828]	; (80031e4 <UART_SetConfig+0x730>)
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 80ca 	bne.w	8003042 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eae:	f7ff f951 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8002eb2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002eba:	461c      	mov	r4, r3
 8002ebc:	f04f 0500 	mov.w	r5, #0
 8002ec0:	4622      	mov	r2, r4
 8002ec2:	462b      	mov	r3, r5
 8002ec4:	1891      	adds	r1, r2, r2
 8002ec6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ec8:	415b      	adcs	r3, r3
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ed0:	1912      	adds	r2, r2, r4
 8002ed2:	eb45 0303 	adc.w	r3, r5, r3
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	00d9      	lsls	r1, r3, #3
 8002ee0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ee4:	00d0      	lsls	r0, r2, #3
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	eb12 0a04 	adds.w	sl, r2, r4
 8002eee:	eb43 0b05 	adc.w	fp, r3, r5
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f04f 0100 	mov.w	r1, #0
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	008b      	lsls	r3, r1, #2
 8002f08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f0c:	0082      	lsls	r2, r0, #2
 8002f0e:	4650      	mov	r0, sl
 8002f10:	4659      	mov	r1, fp
 8002f12:	f7fd f9bd 	bl	8000290 <__aeabi_uldivmod>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4bb3      	ldr	r3, [pc, #716]	; (80031e8 <UART_SetConfig+0x734>)
 8002f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	011e      	lsls	r6, r3, #4
 8002f24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	1894      	adds	r4, r2, r2
 8002f34:	623c      	str	r4, [r7, #32]
 8002f36:	415b      	adcs	r3, r3
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f3e:	1812      	adds	r2, r2, r0
 8002f40:	eb41 0303 	adc.w	r3, r1, r3
 8002f44:	f04f 0400 	mov.w	r4, #0
 8002f48:	f04f 0500 	mov.w	r5, #0
 8002f4c:	00dd      	lsls	r5, r3, #3
 8002f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f52:	00d4      	lsls	r4, r2, #3
 8002f54:	4622      	mov	r2, r4
 8002f56:	462b      	mov	r3, r5
 8002f58:	1814      	adds	r4, r2, r0
 8002f5a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002f5e:	414b      	adcs	r3, r1
 8002f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	008b      	lsls	r3, r1, #2
 8002f7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f7e:	0082      	lsls	r2, r0, #2
 8002f80:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002f84:	f7fd f984 	bl	8000290 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4b96      	ldr	r3, [pc, #600]	; (80031e8 <UART_SetConfig+0x734>)
 8002f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2164      	movs	r1, #100	; 0x64
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	3332      	adds	r3, #50	; 0x32
 8002fa0:	4a91      	ldr	r2, [pc, #580]	; (80031e8 <UART_SetConfig+0x734>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fac:	441e      	add	r6, r3
 8002fae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	1894      	adds	r4, r2, r2
 8002fbe:	61bc      	str	r4, [r7, #24]
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc8:	1812      	adds	r2, r2, r0
 8002fca:	eb41 0303 	adc.w	r3, r1, r3
 8002fce:	f04f 0400 	mov.w	r4, #0
 8002fd2:	f04f 0500 	mov.w	r5, #0
 8002fd6:	00dd      	lsls	r5, r3, #3
 8002fd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fdc:	00d4      	lsls	r4, r2, #3
 8002fde:	4622      	mov	r2, r4
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	1814      	adds	r4, r2, r0
 8002fe4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8002fe8:	414b      	adcs	r3, r1
 8002fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	008b      	lsls	r3, r1, #2
 8003004:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003008:	0082      	lsls	r2, r0, #2
 800300a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800300e:	f7fd f93f 	bl	8000290 <__aeabi_uldivmod>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4b74      	ldr	r3, [pc, #464]	; (80031e8 <UART_SetConfig+0x734>)
 8003018:	fba3 1302 	umull	r1, r3, r3, r2
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	2164      	movs	r1, #100	; 0x64
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	3332      	adds	r3, #50	; 0x32
 800302a:	4a6f      	ldr	r2, [pc, #444]	; (80031e8 <UART_SetConfig+0x734>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4432      	add	r2, r6
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	e0c9      	b.n	80031d6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003042:	f7ff f873 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003046:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800304a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800304e:	461c      	mov	r4, r3
 8003050:	f04f 0500 	mov.w	r5, #0
 8003054:	4622      	mov	r2, r4
 8003056:	462b      	mov	r3, r5
 8003058:	1891      	adds	r1, r2, r2
 800305a:	6139      	str	r1, [r7, #16]
 800305c:	415b      	adcs	r3, r3
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003064:	1912      	adds	r2, r2, r4
 8003066:	eb45 0303 	adc.w	r3, r5, r3
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	00d9      	lsls	r1, r3, #3
 8003074:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003078:	00d0      	lsls	r0, r2, #3
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	eb12 0804 	adds.w	r8, r2, r4
 8003082:	eb43 0905 	adc.w	r9, r3, r5
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030a0:	0082      	lsls	r2, r0, #2
 80030a2:	4640      	mov	r0, r8
 80030a4:	4649      	mov	r1, r9
 80030a6:	f7fd f8f3 	bl	8000290 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <UART_SetConfig+0x734>)
 80030b0:	fba3 2302 	umull	r2, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	011e      	lsls	r6, r3, #4
 80030b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030bc:	4618      	mov	r0, r3
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	1894      	adds	r4, r2, r2
 80030c8:	60bc      	str	r4, [r7, #8]
 80030ca:	415b      	adcs	r3, r3
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d2:	1812      	adds	r2, r2, r0
 80030d4:	eb41 0303 	adc.w	r3, r1, r3
 80030d8:	f04f 0400 	mov.w	r4, #0
 80030dc:	f04f 0500 	mov.w	r5, #0
 80030e0:	00dd      	lsls	r5, r3, #3
 80030e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030e6:	00d4      	lsls	r4, r2, #3
 80030e8:	4622      	mov	r2, r4
 80030ea:	462b      	mov	r3, r5
 80030ec:	1814      	adds	r4, r2, r0
 80030ee:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80030f2:	414b      	adcs	r3, r1
 80030f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4618      	mov	r0, r3
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	008b      	lsls	r3, r1, #2
 800310e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003112:	0082      	lsls	r2, r0, #2
 8003114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003118:	f7fd f8ba 	bl	8000290 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <UART_SetConfig+0x734>)
 8003122:	fba3 1302 	umull	r1, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2164      	movs	r1, #100	; 0x64
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	3332      	adds	r3, #50	; 0x32
 8003134:	4a2c      	ldr	r2, [pc, #176]	; (80031e8 <UART_SetConfig+0x734>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003140:	441e      	add	r6, r3
 8003142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003146:	4618      	mov	r0, r3
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	1894      	adds	r4, r2, r2
 8003152:	603c      	str	r4, [r7, #0]
 8003154:	415b      	adcs	r3, r3
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800315c:	1812      	adds	r2, r2, r0
 800315e:	eb41 0303 	adc.w	r3, r1, r3
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	f04f 0500 	mov.w	r5, #0
 800316a:	00dd      	lsls	r5, r3, #3
 800316c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003170:	00d4      	lsls	r4, r2, #3
 8003172:	4622      	mov	r2, r4
 8003174:	462b      	mov	r3, r5
 8003176:	1814      	adds	r4, r2, r0
 8003178:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800317c:	414b      	adcs	r3, r1
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4618      	mov	r0, r3
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	008b      	lsls	r3, r1, #2
 8003198:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800319c:	0082      	lsls	r2, r0, #2
 800319e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80031a2:	f7fd f875 	bl	8000290 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <UART_SetConfig+0x734>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <UART_SetConfig+0x734>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4432      	add	r2, r6
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	e7ff      	b.n	80031d6 <UART_SetConfig+0x722>
 80031d6:	bf00      	nop
 80031d8:	37f4      	adds	r7, #244	; 0xf4
 80031da:	46bd      	mov	sp, r7
 80031dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031e0:	40011000 	.word	0x40011000
 80031e4:	40011400 	.word	0x40011400
 80031e8:	51eb851f 	.word	0x51eb851f

080031ec <__errno>:
 80031ec:	4b01      	ldr	r3, [pc, #4]	; (80031f4 <__errno+0x8>)
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	2000000c 	.word	0x2000000c

080031f8 <__libc_init_array>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4d0d      	ldr	r5, [pc, #52]	; (8003230 <__libc_init_array+0x38>)
 80031fc:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <__libc_init_array+0x3c>)
 80031fe:	1b64      	subs	r4, r4, r5
 8003200:	10a4      	asrs	r4, r4, #2
 8003202:	2600      	movs	r6, #0
 8003204:	42a6      	cmp	r6, r4
 8003206:	d109      	bne.n	800321c <__libc_init_array+0x24>
 8003208:	4d0b      	ldr	r5, [pc, #44]	; (8003238 <__libc_init_array+0x40>)
 800320a:	4c0c      	ldr	r4, [pc, #48]	; (800323c <__libc_init_array+0x44>)
 800320c:	f000 fc4e 	bl	8003aac <_init>
 8003210:	1b64      	subs	r4, r4, r5
 8003212:	10a4      	asrs	r4, r4, #2
 8003214:	2600      	movs	r6, #0
 8003216:	42a6      	cmp	r6, r4
 8003218:	d105      	bne.n	8003226 <__libc_init_array+0x2e>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003220:	4798      	blx	r3
 8003222:	3601      	adds	r6, #1
 8003224:	e7ee      	b.n	8003204 <__libc_init_array+0xc>
 8003226:	f855 3b04 	ldr.w	r3, [r5], #4
 800322a:	4798      	blx	r3
 800322c:	3601      	adds	r6, #1
 800322e:	e7f2      	b.n	8003216 <__libc_init_array+0x1e>
 8003230:	08003b34 	.word	0x08003b34
 8003234:	08003b34 	.word	0x08003b34
 8003238:	08003b34 	.word	0x08003b34
 800323c:	08003b38 	.word	0x08003b38

08003240 <memset>:
 8003240:	4402      	add	r2, r0
 8003242:	4603      	mov	r3, r0
 8003244:	4293      	cmp	r3, r2
 8003246:	d100      	bne.n	800324a <memset+0xa>
 8003248:	4770      	bx	lr
 800324a:	f803 1b01 	strb.w	r1, [r3], #1
 800324e:	e7f9      	b.n	8003244 <memset+0x4>

08003250 <siprintf>:
 8003250:	b40e      	push	{r1, r2, r3}
 8003252:	b500      	push	{lr}
 8003254:	b09c      	sub	sp, #112	; 0x70
 8003256:	ab1d      	add	r3, sp, #116	; 0x74
 8003258:	9002      	str	r0, [sp, #8]
 800325a:	9006      	str	r0, [sp, #24]
 800325c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003260:	4809      	ldr	r0, [pc, #36]	; (8003288 <siprintf+0x38>)
 8003262:	9107      	str	r1, [sp, #28]
 8003264:	9104      	str	r1, [sp, #16]
 8003266:	4909      	ldr	r1, [pc, #36]	; (800328c <siprintf+0x3c>)
 8003268:	f853 2b04 	ldr.w	r2, [r3], #4
 800326c:	9105      	str	r1, [sp, #20]
 800326e:	6800      	ldr	r0, [r0, #0]
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	a902      	add	r1, sp, #8
 8003274:	f000 f868 	bl	8003348 <_svfiprintf_r>
 8003278:	9b02      	ldr	r3, [sp, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	b01c      	add	sp, #112	; 0x70
 8003280:	f85d eb04 	ldr.w	lr, [sp], #4
 8003284:	b003      	add	sp, #12
 8003286:	4770      	bx	lr
 8003288:	2000000c 	.word	0x2000000c
 800328c:	ffff0208 	.word	0xffff0208

08003290 <__ssputs_r>:
 8003290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003294:	688e      	ldr	r6, [r1, #8]
 8003296:	429e      	cmp	r6, r3
 8003298:	4682      	mov	sl, r0
 800329a:	460c      	mov	r4, r1
 800329c:	4690      	mov	r8, r2
 800329e:	461f      	mov	r7, r3
 80032a0:	d838      	bhi.n	8003314 <__ssputs_r+0x84>
 80032a2:	898a      	ldrh	r2, [r1, #12]
 80032a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032a8:	d032      	beq.n	8003310 <__ssputs_r+0x80>
 80032aa:	6825      	ldr	r5, [r4, #0]
 80032ac:	6909      	ldr	r1, [r1, #16]
 80032ae:	eba5 0901 	sub.w	r9, r5, r1
 80032b2:	6965      	ldr	r5, [r4, #20]
 80032b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032bc:	3301      	adds	r3, #1
 80032be:	444b      	add	r3, r9
 80032c0:	106d      	asrs	r5, r5, #1
 80032c2:	429d      	cmp	r5, r3
 80032c4:	bf38      	it	cc
 80032c6:	461d      	movcc	r5, r3
 80032c8:	0553      	lsls	r3, r2, #21
 80032ca:	d531      	bpl.n	8003330 <__ssputs_r+0xa0>
 80032cc:	4629      	mov	r1, r5
 80032ce:	f000 fb47 	bl	8003960 <_malloc_r>
 80032d2:	4606      	mov	r6, r0
 80032d4:	b950      	cbnz	r0, 80032ec <__ssputs_r+0x5c>
 80032d6:	230c      	movs	r3, #12
 80032d8:	f8ca 3000 	str.w	r3, [sl]
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ec:	6921      	ldr	r1, [r4, #16]
 80032ee:	464a      	mov	r2, r9
 80032f0:	f000 fabe 	bl	8003870 <memcpy>
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fe:	81a3      	strh	r3, [r4, #12]
 8003300:	6126      	str	r6, [r4, #16]
 8003302:	6165      	str	r5, [r4, #20]
 8003304:	444e      	add	r6, r9
 8003306:	eba5 0509 	sub.w	r5, r5, r9
 800330a:	6026      	str	r6, [r4, #0]
 800330c:	60a5      	str	r5, [r4, #8]
 800330e:	463e      	mov	r6, r7
 8003310:	42be      	cmp	r6, r7
 8003312:	d900      	bls.n	8003316 <__ssputs_r+0x86>
 8003314:	463e      	mov	r6, r7
 8003316:	4632      	mov	r2, r6
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	4641      	mov	r1, r8
 800331c:	f000 fab6 	bl	800388c <memmove>
 8003320:	68a3      	ldr	r3, [r4, #8]
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	1b9b      	subs	r3, r3, r6
 8003326:	4432      	add	r2, r6
 8003328:	60a3      	str	r3, [r4, #8]
 800332a:	6022      	str	r2, [r4, #0]
 800332c:	2000      	movs	r0, #0
 800332e:	e7db      	b.n	80032e8 <__ssputs_r+0x58>
 8003330:	462a      	mov	r2, r5
 8003332:	f000 fb6f 	bl	8003a14 <_realloc_r>
 8003336:	4606      	mov	r6, r0
 8003338:	2800      	cmp	r0, #0
 800333a:	d1e1      	bne.n	8003300 <__ssputs_r+0x70>
 800333c:	6921      	ldr	r1, [r4, #16]
 800333e:	4650      	mov	r0, sl
 8003340:	f000 fabe 	bl	80038c0 <_free_r>
 8003344:	e7c7      	b.n	80032d6 <__ssputs_r+0x46>
	...

08003348 <_svfiprintf_r>:
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334c:	4698      	mov	r8, r3
 800334e:	898b      	ldrh	r3, [r1, #12]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	b09d      	sub	sp, #116	; 0x74
 8003354:	4607      	mov	r7, r0
 8003356:	460d      	mov	r5, r1
 8003358:	4614      	mov	r4, r2
 800335a:	d50e      	bpl.n	800337a <_svfiprintf_r+0x32>
 800335c:	690b      	ldr	r3, [r1, #16]
 800335e:	b963      	cbnz	r3, 800337a <_svfiprintf_r+0x32>
 8003360:	2140      	movs	r1, #64	; 0x40
 8003362:	f000 fafd 	bl	8003960 <_malloc_r>
 8003366:	6028      	str	r0, [r5, #0]
 8003368:	6128      	str	r0, [r5, #16]
 800336a:	b920      	cbnz	r0, 8003376 <_svfiprintf_r+0x2e>
 800336c:	230c      	movs	r3, #12
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	e0d1      	b.n	800351a <_svfiprintf_r+0x1d2>
 8003376:	2340      	movs	r3, #64	; 0x40
 8003378:	616b      	str	r3, [r5, #20]
 800337a:	2300      	movs	r3, #0
 800337c:	9309      	str	r3, [sp, #36]	; 0x24
 800337e:	2320      	movs	r3, #32
 8003380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003384:	f8cd 800c 	str.w	r8, [sp, #12]
 8003388:	2330      	movs	r3, #48	; 0x30
 800338a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003534 <_svfiprintf_r+0x1ec>
 800338e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003392:	f04f 0901 	mov.w	r9, #1
 8003396:	4623      	mov	r3, r4
 8003398:	469a      	mov	sl, r3
 800339a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800339e:	b10a      	cbz	r2, 80033a4 <_svfiprintf_r+0x5c>
 80033a0:	2a25      	cmp	r2, #37	; 0x25
 80033a2:	d1f9      	bne.n	8003398 <_svfiprintf_r+0x50>
 80033a4:	ebba 0b04 	subs.w	fp, sl, r4
 80033a8:	d00b      	beq.n	80033c2 <_svfiprintf_r+0x7a>
 80033aa:	465b      	mov	r3, fp
 80033ac:	4622      	mov	r2, r4
 80033ae:	4629      	mov	r1, r5
 80033b0:	4638      	mov	r0, r7
 80033b2:	f7ff ff6d 	bl	8003290 <__ssputs_r>
 80033b6:	3001      	adds	r0, #1
 80033b8:	f000 80aa 	beq.w	8003510 <_svfiprintf_r+0x1c8>
 80033bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033be:	445a      	add	r2, fp
 80033c0:	9209      	str	r2, [sp, #36]	; 0x24
 80033c2:	f89a 3000 	ldrb.w	r3, [sl]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80a2 	beq.w	8003510 <_svfiprintf_r+0x1c8>
 80033cc:	2300      	movs	r3, #0
 80033ce:	f04f 32ff 	mov.w	r2, #4294967295
 80033d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033d6:	f10a 0a01 	add.w	sl, sl, #1
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	9307      	str	r3, [sp, #28]
 80033de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033e2:	931a      	str	r3, [sp, #104]	; 0x68
 80033e4:	4654      	mov	r4, sl
 80033e6:	2205      	movs	r2, #5
 80033e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ec:	4851      	ldr	r0, [pc, #324]	; (8003534 <_svfiprintf_r+0x1ec>)
 80033ee:	f7fc feff 	bl	80001f0 <memchr>
 80033f2:	9a04      	ldr	r2, [sp, #16]
 80033f4:	b9d8      	cbnz	r0, 800342e <_svfiprintf_r+0xe6>
 80033f6:	06d0      	lsls	r0, r2, #27
 80033f8:	bf44      	itt	mi
 80033fa:	2320      	movmi	r3, #32
 80033fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003400:	0711      	lsls	r1, r2, #28
 8003402:	bf44      	itt	mi
 8003404:	232b      	movmi	r3, #43	; 0x2b
 8003406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800340a:	f89a 3000 	ldrb.w	r3, [sl]
 800340e:	2b2a      	cmp	r3, #42	; 0x2a
 8003410:	d015      	beq.n	800343e <_svfiprintf_r+0xf6>
 8003412:	9a07      	ldr	r2, [sp, #28]
 8003414:	4654      	mov	r4, sl
 8003416:	2000      	movs	r0, #0
 8003418:	f04f 0c0a 	mov.w	ip, #10
 800341c:	4621      	mov	r1, r4
 800341e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003422:	3b30      	subs	r3, #48	; 0x30
 8003424:	2b09      	cmp	r3, #9
 8003426:	d94e      	bls.n	80034c6 <_svfiprintf_r+0x17e>
 8003428:	b1b0      	cbz	r0, 8003458 <_svfiprintf_r+0x110>
 800342a:	9207      	str	r2, [sp, #28]
 800342c:	e014      	b.n	8003458 <_svfiprintf_r+0x110>
 800342e:	eba0 0308 	sub.w	r3, r0, r8
 8003432:	fa09 f303 	lsl.w	r3, r9, r3
 8003436:	4313      	orrs	r3, r2
 8003438:	9304      	str	r3, [sp, #16]
 800343a:	46a2      	mov	sl, r4
 800343c:	e7d2      	b.n	80033e4 <_svfiprintf_r+0x9c>
 800343e:	9b03      	ldr	r3, [sp, #12]
 8003440:	1d19      	adds	r1, r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	9103      	str	r1, [sp, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	bfbb      	ittet	lt
 800344a:	425b      	neglt	r3, r3
 800344c:	f042 0202 	orrlt.w	r2, r2, #2
 8003450:	9307      	strge	r3, [sp, #28]
 8003452:	9307      	strlt	r3, [sp, #28]
 8003454:	bfb8      	it	lt
 8003456:	9204      	strlt	r2, [sp, #16]
 8003458:	7823      	ldrb	r3, [r4, #0]
 800345a:	2b2e      	cmp	r3, #46	; 0x2e
 800345c:	d10c      	bne.n	8003478 <_svfiprintf_r+0x130>
 800345e:	7863      	ldrb	r3, [r4, #1]
 8003460:	2b2a      	cmp	r3, #42	; 0x2a
 8003462:	d135      	bne.n	80034d0 <_svfiprintf_r+0x188>
 8003464:	9b03      	ldr	r3, [sp, #12]
 8003466:	1d1a      	adds	r2, r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	9203      	str	r2, [sp, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	bfb8      	it	lt
 8003470:	f04f 33ff 	movlt.w	r3, #4294967295
 8003474:	3402      	adds	r4, #2
 8003476:	9305      	str	r3, [sp, #20]
 8003478:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003544 <_svfiprintf_r+0x1fc>
 800347c:	7821      	ldrb	r1, [r4, #0]
 800347e:	2203      	movs	r2, #3
 8003480:	4650      	mov	r0, sl
 8003482:	f7fc feb5 	bl	80001f0 <memchr>
 8003486:	b140      	cbz	r0, 800349a <_svfiprintf_r+0x152>
 8003488:	2340      	movs	r3, #64	; 0x40
 800348a:	eba0 000a 	sub.w	r0, r0, sl
 800348e:	fa03 f000 	lsl.w	r0, r3, r0
 8003492:	9b04      	ldr	r3, [sp, #16]
 8003494:	4303      	orrs	r3, r0
 8003496:	3401      	adds	r4, #1
 8003498:	9304      	str	r3, [sp, #16]
 800349a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800349e:	4826      	ldr	r0, [pc, #152]	; (8003538 <_svfiprintf_r+0x1f0>)
 80034a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034a4:	2206      	movs	r2, #6
 80034a6:	f7fc fea3 	bl	80001f0 <memchr>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d038      	beq.n	8003520 <_svfiprintf_r+0x1d8>
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <_svfiprintf_r+0x1f4>)
 80034b0:	bb1b      	cbnz	r3, 80034fa <_svfiprintf_r+0x1b2>
 80034b2:	9b03      	ldr	r3, [sp, #12]
 80034b4:	3307      	adds	r3, #7
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	3308      	adds	r3, #8
 80034bc:	9303      	str	r3, [sp, #12]
 80034be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c0:	4433      	add	r3, r6
 80034c2:	9309      	str	r3, [sp, #36]	; 0x24
 80034c4:	e767      	b.n	8003396 <_svfiprintf_r+0x4e>
 80034c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ca:	460c      	mov	r4, r1
 80034cc:	2001      	movs	r0, #1
 80034ce:	e7a5      	b.n	800341c <_svfiprintf_r+0xd4>
 80034d0:	2300      	movs	r3, #0
 80034d2:	3401      	adds	r4, #1
 80034d4:	9305      	str	r3, [sp, #20]
 80034d6:	4619      	mov	r1, r3
 80034d8:	f04f 0c0a 	mov.w	ip, #10
 80034dc:	4620      	mov	r0, r4
 80034de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e2:	3a30      	subs	r2, #48	; 0x30
 80034e4:	2a09      	cmp	r2, #9
 80034e6:	d903      	bls.n	80034f0 <_svfiprintf_r+0x1a8>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0c5      	beq.n	8003478 <_svfiprintf_r+0x130>
 80034ec:	9105      	str	r1, [sp, #20]
 80034ee:	e7c3      	b.n	8003478 <_svfiprintf_r+0x130>
 80034f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80034f4:	4604      	mov	r4, r0
 80034f6:	2301      	movs	r3, #1
 80034f8:	e7f0      	b.n	80034dc <_svfiprintf_r+0x194>
 80034fa:	ab03      	add	r3, sp, #12
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	462a      	mov	r2, r5
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <_svfiprintf_r+0x1f8>)
 8003502:	a904      	add	r1, sp, #16
 8003504:	4638      	mov	r0, r7
 8003506:	f3af 8000 	nop.w
 800350a:	1c42      	adds	r2, r0, #1
 800350c:	4606      	mov	r6, r0
 800350e:	d1d6      	bne.n	80034be <_svfiprintf_r+0x176>
 8003510:	89ab      	ldrh	r3, [r5, #12]
 8003512:	065b      	lsls	r3, r3, #25
 8003514:	f53f af2c 	bmi.w	8003370 <_svfiprintf_r+0x28>
 8003518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800351a:	b01d      	add	sp, #116	; 0x74
 800351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003520:	ab03      	add	r3, sp, #12
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	462a      	mov	r2, r5
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <_svfiprintf_r+0x1f8>)
 8003528:	a904      	add	r1, sp, #16
 800352a:	4638      	mov	r0, r7
 800352c:	f000 f87a 	bl	8003624 <_printf_i>
 8003530:	e7eb      	b.n	800350a <_svfiprintf_r+0x1c2>
 8003532:	bf00      	nop
 8003534:	08003af8 	.word	0x08003af8
 8003538:	08003b02 	.word	0x08003b02
 800353c:	00000000 	.word	0x00000000
 8003540:	08003291 	.word	0x08003291
 8003544:	08003afe 	.word	0x08003afe

08003548 <_printf_common>:
 8003548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354c:	4616      	mov	r6, r2
 800354e:	4699      	mov	r9, r3
 8003550:	688a      	ldr	r2, [r1, #8]
 8003552:	690b      	ldr	r3, [r1, #16]
 8003554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003558:	4293      	cmp	r3, r2
 800355a:	bfb8      	it	lt
 800355c:	4613      	movlt	r3, r2
 800355e:	6033      	str	r3, [r6, #0]
 8003560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003564:	4607      	mov	r7, r0
 8003566:	460c      	mov	r4, r1
 8003568:	b10a      	cbz	r2, 800356e <_printf_common+0x26>
 800356a:	3301      	adds	r3, #1
 800356c:	6033      	str	r3, [r6, #0]
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	0699      	lsls	r1, r3, #26
 8003572:	bf42      	ittt	mi
 8003574:	6833      	ldrmi	r3, [r6, #0]
 8003576:	3302      	addmi	r3, #2
 8003578:	6033      	strmi	r3, [r6, #0]
 800357a:	6825      	ldr	r5, [r4, #0]
 800357c:	f015 0506 	ands.w	r5, r5, #6
 8003580:	d106      	bne.n	8003590 <_printf_common+0x48>
 8003582:	f104 0a19 	add.w	sl, r4, #25
 8003586:	68e3      	ldr	r3, [r4, #12]
 8003588:	6832      	ldr	r2, [r6, #0]
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	42ab      	cmp	r3, r5
 800358e:	dc26      	bgt.n	80035de <_printf_common+0x96>
 8003590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003594:	1e13      	subs	r3, r2, #0
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	bf18      	it	ne
 800359a:	2301      	movne	r3, #1
 800359c:	0692      	lsls	r2, r2, #26
 800359e:	d42b      	bmi.n	80035f8 <_printf_common+0xb0>
 80035a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035a4:	4649      	mov	r1, r9
 80035a6:	4638      	mov	r0, r7
 80035a8:	47c0      	blx	r8
 80035aa:	3001      	adds	r0, #1
 80035ac:	d01e      	beq.n	80035ec <_printf_common+0xa4>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	68e5      	ldr	r5, [r4, #12]
 80035b2:	6832      	ldr	r2, [r6, #0]
 80035b4:	f003 0306 	and.w	r3, r3, #6
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	bf08      	it	eq
 80035bc:	1aad      	subeq	r5, r5, r2
 80035be:	68a3      	ldr	r3, [r4, #8]
 80035c0:	6922      	ldr	r2, [r4, #16]
 80035c2:	bf0c      	ite	eq
 80035c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035c8:	2500      	movne	r5, #0
 80035ca:	4293      	cmp	r3, r2
 80035cc:	bfc4      	itt	gt
 80035ce:	1a9b      	subgt	r3, r3, r2
 80035d0:	18ed      	addgt	r5, r5, r3
 80035d2:	2600      	movs	r6, #0
 80035d4:	341a      	adds	r4, #26
 80035d6:	42b5      	cmp	r5, r6
 80035d8:	d11a      	bne.n	8003610 <_printf_common+0xc8>
 80035da:	2000      	movs	r0, #0
 80035dc:	e008      	b.n	80035f0 <_printf_common+0xa8>
 80035de:	2301      	movs	r3, #1
 80035e0:	4652      	mov	r2, sl
 80035e2:	4649      	mov	r1, r9
 80035e4:	4638      	mov	r0, r7
 80035e6:	47c0      	blx	r8
 80035e8:	3001      	adds	r0, #1
 80035ea:	d103      	bne.n	80035f4 <_printf_common+0xac>
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f4:	3501      	adds	r5, #1
 80035f6:	e7c6      	b.n	8003586 <_printf_common+0x3e>
 80035f8:	18e1      	adds	r1, r4, r3
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	2030      	movs	r0, #48	; 0x30
 80035fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003602:	4422      	add	r2, r4
 8003604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800360c:	3302      	adds	r3, #2
 800360e:	e7c7      	b.n	80035a0 <_printf_common+0x58>
 8003610:	2301      	movs	r3, #1
 8003612:	4622      	mov	r2, r4
 8003614:	4649      	mov	r1, r9
 8003616:	4638      	mov	r0, r7
 8003618:	47c0      	blx	r8
 800361a:	3001      	adds	r0, #1
 800361c:	d0e6      	beq.n	80035ec <_printf_common+0xa4>
 800361e:	3601      	adds	r6, #1
 8003620:	e7d9      	b.n	80035d6 <_printf_common+0x8e>
	...

08003624 <_printf_i>:
 8003624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	460c      	mov	r4, r1
 800362a:	4691      	mov	r9, r2
 800362c:	7e27      	ldrb	r7, [r4, #24]
 800362e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003630:	2f78      	cmp	r7, #120	; 0x78
 8003632:	4680      	mov	r8, r0
 8003634:	469a      	mov	sl, r3
 8003636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800363a:	d807      	bhi.n	800364c <_printf_i+0x28>
 800363c:	2f62      	cmp	r7, #98	; 0x62
 800363e:	d80a      	bhi.n	8003656 <_printf_i+0x32>
 8003640:	2f00      	cmp	r7, #0
 8003642:	f000 80d8 	beq.w	80037f6 <_printf_i+0x1d2>
 8003646:	2f58      	cmp	r7, #88	; 0x58
 8003648:	f000 80a3 	beq.w	8003792 <_printf_i+0x16e>
 800364c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003654:	e03a      	b.n	80036cc <_printf_i+0xa8>
 8003656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800365a:	2b15      	cmp	r3, #21
 800365c:	d8f6      	bhi.n	800364c <_printf_i+0x28>
 800365e:	a001      	add	r0, pc, #4	; (adr r0, 8003664 <_printf_i+0x40>)
 8003660:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003664:	080036bd 	.word	0x080036bd
 8003668:	080036d1 	.word	0x080036d1
 800366c:	0800364d 	.word	0x0800364d
 8003670:	0800364d 	.word	0x0800364d
 8003674:	0800364d 	.word	0x0800364d
 8003678:	0800364d 	.word	0x0800364d
 800367c:	080036d1 	.word	0x080036d1
 8003680:	0800364d 	.word	0x0800364d
 8003684:	0800364d 	.word	0x0800364d
 8003688:	0800364d 	.word	0x0800364d
 800368c:	0800364d 	.word	0x0800364d
 8003690:	080037dd 	.word	0x080037dd
 8003694:	08003701 	.word	0x08003701
 8003698:	080037bf 	.word	0x080037bf
 800369c:	0800364d 	.word	0x0800364d
 80036a0:	0800364d 	.word	0x0800364d
 80036a4:	080037ff 	.word	0x080037ff
 80036a8:	0800364d 	.word	0x0800364d
 80036ac:	08003701 	.word	0x08003701
 80036b0:	0800364d 	.word	0x0800364d
 80036b4:	0800364d 	.word	0x0800364d
 80036b8:	080037c7 	.word	0x080037c7
 80036bc:	680b      	ldr	r3, [r1, #0]
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	600a      	str	r2, [r1, #0]
 80036c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0a3      	b.n	8003818 <_printf_i+0x1f4>
 80036d0:	6825      	ldr	r5, [r4, #0]
 80036d2:	6808      	ldr	r0, [r1, #0]
 80036d4:	062e      	lsls	r6, r5, #24
 80036d6:	f100 0304 	add.w	r3, r0, #4
 80036da:	d50a      	bpl.n	80036f2 <_printf_i+0xce>
 80036dc:	6805      	ldr	r5, [r0, #0]
 80036de:	600b      	str	r3, [r1, #0]
 80036e0:	2d00      	cmp	r5, #0
 80036e2:	da03      	bge.n	80036ec <_printf_i+0xc8>
 80036e4:	232d      	movs	r3, #45	; 0x2d
 80036e6:	426d      	negs	r5, r5
 80036e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ec:	485e      	ldr	r0, [pc, #376]	; (8003868 <_printf_i+0x244>)
 80036ee:	230a      	movs	r3, #10
 80036f0:	e019      	b.n	8003726 <_printf_i+0x102>
 80036f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036f6:	6805      	ldr	r5, [r0, #0]
 80036f8:	600b      	str	r3, [r1, #0]
 80036fa:	bf18      	it	ne
 80036fc:	b22d      	sxthne	r5, r5
 80036fe:	e7ef      	b.n	80036e0 <_printf_i+0xbc>
 8003700:	680b      	ldr	r3, [r1, #0]
 8003702:	6825      	ldr	r5, [r4, #0]
 8003704:	1d18      	adds	r0, r3, #4
 8003706:	6008      	str	r0, [r1, #0]
 8003708:	0628      	lsls	r0, r5, #24
 800370a:	d501      	bpl.n	8003710 <_printf_i+0xec>
 800370c:	681d      	ldr	r5, [r3, #0]
 800370e:	e002      	b.n	8003716 <_printf_i+0xf2>
 8003710:	0669      	lsls	r1, r5, #25
 8003712:	d5fb      	bpl.n	800370c <_printf_i+0xe8>
 8003714:	881d      	ldrh	r5, [r3, #0]
 8003716:	4854      	ldr	r0, [pc, #336]	; (8003868 <_printf_i+0x244>)
 8003718:	2f6f      	cmp	r7, #111	; 0x6f
 800371a:	bf0c      	ite	eq
 800371c:	2308      	moveq	r3, #8
 800371e:	230a      	movne	r3, #10
 8003720:	2100      	movs	r1, #0
 8003722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003726:	6866      	ldr	r6, [r4, #4]
 8003728:	60a6      	str	r6, [r4, #8]
 800372a:	2e00      	cmp	r6, #0
 800372c:	bfa2      	ittt	ge
 800372e:	6821      	ldrge	r1, [r4, #0]
 8003730:	f021 0104 	bicge.w	r1, r1, #4
 8003734:	6021      	strge	r1, [r4, #0]
 8003736:	b90d      	cbnz	r5, 800373c <_printf_i+0x118>
 8003738:	2e00      	cmp	r6, #0
 800373a:	d04d      	beq.n	80037d8 <_printf_i+0x1b4>
 800373c:	4616      	mov	r6, r2
 800373e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003742:	fb03 5711 	mls	r7, r3, r1, r5
 8003746:	5dc7      	ldrb	r7, [r0, r7]
 8003748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800374c:	462f      	mov	r7, r5
 800374e:	42bb      	cmp	r3, r7
 8003750:	460d      	mov	r5, r1
 8003752:	d9f4      	bls.n	800373e <_printf_i+0x11a>
 8003754:	2b08      	cmp	r3, #8
 8003756:	d10b      	bne.n	8003770 <_printf_i+0x14c>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	07df      	lsls	r7, r3, #31
 800375c:	d508      	bpl.n	8003770 <_printf_i+0x14c>
 800375e:	6923      	ldr	r3, [r4, #16]
 8003760:	6861      	ldr	r1, [r4, #4]
 8003762:	4299      	cmp	r1, r3
 8003764:	bfde      	ittt	le
 8003766:	2330      	movle	r3, #48	; 0x30
 8003768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800376c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003770:	1b92      	subs	r2, r2, r6
 8003772:	6122      	str	r2, [r4, #16]
 8003774:	f8cd a000 	str.w	sl, [sp]
 8003778:	464b      	mov	r3, r9
 800377a:	aa03      	add	r2, sp, #12
 800377c:	4621      	mov	r1, r4
 800377e:	4640      	mov	r0, r8
 8003780:	f7ff fee2 	bl	8003548 <_printf_common>
 8003784:	3001      	adds	r0, #1
 8003786:	d14c      	bne.n	8003822 <_printf_i+0x1fe>
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	b004      	add	sp, #16
 800378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003792:	4835      	ldr	r0, [pc, #212]	; (8003868 <_printf_i+0x244>)
 8003794:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	680e      	ldr	r6, [r1, #0]
 800379c:	061f      	lsls	r7, r3, #24
 800379e:	f856 5b04 	ldr.w	r5, [r6], #4
 80037a2:	600e      	str	r6, [r1, #0]
 80037a4:	d514      	bpl.n	80037d0 <_printf_i+0x1ac>
 80037a6:	07d9      	lsls	r1, r3, #31
 80037a8:	bf44      	itt	mi
 80037aa:	f043 0320 	orrmi.w	r3, r3, #32
 80037ae:	6023      	strmi	r3, [r4, #0]
 80037b0:	b91d      	cbnz	r5, 80037ba <_printf_i+0x196>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	f023 0320 	bic.w	r3, r3, #32
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	2310      	movs	r3, #16
 80037bc:	e7b0      	b.n	8003720 <_printf_i+0xfc>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	f043 0320 	orr.w	r3, r3, #32
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	2378      	movs	r3, #120	; 0x78
 80037c8:	4828      	ldr	r0, [pc, #160]	; (800386c <_printf_i+0x248>)
 80037ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037ce:	e7e3      	b.n	8003798 <_printf_i+0x174>
 80037d0:	065e      	lsls	r6, r3, #25
 80037d2:	bf48      	it	mi
 80037d4:	b2ad      	uxthmi	r5, r5
 80037d6:	e7e6      	b.n	80037a6 <_printf_i+0x182>
 80037d8:	4616      	mov	r6, r2
 80037da:	e7bb      	b.n	8003754 <_printf_i+0x130>
 80037dc:	680b      	ldr	r3, [r1, #0]
 80037de:	6826      	ldr	r6, [r4, #0]
 80037e0:	6960      	ldr	r0, [r4, #20]
 80037e2:	1d1d      	adds	r5, r3, #4
 80037e4:	600d      	str	r5, [r1, #0]
 80037e6:	0635      	lsls	r5, r6, #24
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	d501      	bpl.n	80037f0 <_printf_i+0x1cc>
 80037ec:	6018      	str	r0, [r3, #0]
 80037ee:	e002      	b.n	80037f6 <_printf_i+0x1d2>
 80037f0:	0671      	lsls	r1, r6, #25
 80037f2:	d5fb      	bpl.n	80037ec <_printf_i+0x1c8>
 80037f4:	8018      	strh	r0, [r3, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	6123      	str	r3, [r4, #16]
 80037fa:	4616      	mov	r6, r2
 80037fc:	e7ba      	b.n	8003774 <_printf_i+0x150>
 80037fe:	680b      	ldr	r3, [r1, #0]
 8003800:	1d1a      	adds	r2, r3, #4
 8003802:	600a      	str	r2, [r1, #0]
 8003804:	681e      	ldr	r6, [r3, #0]
 8003806:	6862      	ldr	r2, [r4, #4]
 8003808:	2100      	movs	r1, #0
 800380a:	4630      	mov	r0, r6
 800380c:	f7fc fcf0 	bl	80001f0 <memchr>
 8003810:	b108      	cbz	r0, 8003816 <_printf_i+0x1f2>
 8003812:	1b80      	subs	r0, r0, r6
 8003814:	6060      	str	r0, [r4, #4]
 8003816:	6863      	ldr	r3, [r4, #4]
 8003818:	6123      	str	r3, [r4, #16]
 800381a:	2300      	movs	r3, #0
 800381c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003820:	e7a8      	b.n	8003774 <_printf_i+0x150>
 8003822:	6923      	ldr	r3, [r4, #16]
 8003824:	4632      	mov	r2, r6
 8003826:	4649      	mov	r1, r9
 8003828:	4640      	mov	r0, r8
 800382a:	47d0      	blx	sl
 800382c:	3001      	adds	r0, #1
 800382e:	d0ab      	beq.n	8003788 <_printf_i+0x164>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	079b      	lsls	r3, r3, #30
 8003834:	d413      	bmi.n	800385e <_printf_i+0x23a>
 8003836:	68e0      	ldr	r0, [r4, #12]
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	4298      	cmp	r0, r3
 800383c:	bfb8      	it	lt
 800383e:	4618      	movlt	r0, r3
 8003840:	e7a4      	b.n	800378c <_printf_i+0x168>
 8003842:	2301      	movs	r3, #1
 8003844:	4632      	mov	r2, r6
 8003846:	4649      	mov	r1, r9
 8003848:	4640      	mov	r0, r8
 800384a:	47d0      	blx	sl
 800384c:	3001      	adds	r0, #1
 800384e:	d09b      	beq.n	8003788 <_printf_i+0x164>
 8003850:	3501      	adds	r5, #1
 8003852:	68e3      	ldr	r3, [r4, #12]
 8003854:	9903      	ldr	r1, [sp, #12]
 8003856:	1a5b      	subs	r3, r3, r1
 8003858:	42ab      	cmp	r3, r5
 800385a:	dcf2      	bgt.n	8003842 <_printf_i+0x21e>
 800385c:	e7eb      	b.n	8003836 <_printf_i+0x212>
 800385e:	2500      	movs	r5, #0
 8003860:	f104 0619 	add.w	r6, r4, #25
 8003864:	e7f5      	b.n	8003852 <_printf_i+0x22e>
 8003866:	bf00      	nop
 8003868:	08003b09 	.word	0x08003b09
 800386c:	08003b1a 	.word	0x08003b1a

08003870 <memcpy>:
 8003870:	440a      	add	r2, r1
 8003872:	4291      	cmp	r1, r2
 8003874:	f100 33ff 	add.w	r3, r0, #4294967295
 8003878:	d100      	bne.n	800387c <memcpy+0xc>
 800387a:	4770      	bx	lr
 800387c:	b510      	push	{r4, lr}
 800387e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003886:	4291      	cmp	r1, r2
 8003888:	d1f9      	bne.n	800387e <memcpy+0xe>
 800388a:	bd10      	pop	{r4, pc}

0800388c <memmove>:
 800388c:	4288      	cmp	r0, r1
 800388e:	b510      	push	{r4, lr}
 8003890:	eb01 0402 	add.w	r4, r1, r2
 8003894:	d902      	bls.n	800389c <memmove+0x10>
 8003896:	4284      	cmp	r4, r0
 8003898:	4623      	mov	r3, r4
 800389a:	d807      	bhi.n	80038ac <memmove+0x20>
 800389c:	1e43      	subs	r3, r0, #1
 800389e:	42a1      	cmp	r1, r4
 80038a0:	d008      	beq.n	80038b4 <memmove+0x28>
 80038a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038aa:	e7f8      	b.n	800389e <memmove+0x12>
 80038ac:	4402      	add	r2, r0
 80038ae:	4601      	mov	r1, r0
 80038b0:	428a      	cmp	r2, r1
 80038b2:	d100      	bne.n	80038b6 <memmove+0x2a>
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038be:	e7f7      	b.n	80038b0 <memmove+0x24>

080038c0 <_free_r>:
 80038c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038c2:	2900      	cmp	r1, #0
 80038c4:	d048      	beq.n	8003958 <_free_r+0x98>
 80038c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ca:	9001      	str	r0, [sp, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f1a1 0404 	sub.w	r4, r1, #4
 80038d2:	bfb8      	it	lt
 80038d4:	18e4      	addlt	r4, r4, r3
 80038d6:	f000 f8d3 	bl	8003a80 <__malloc_lock>
 80038da:	4a20      	ldr	r2, [pc, #128]	; (800395c <_free_r+0x9c>)
 80038dc:	9801      	ldr	r0, [sp, #4]
 80038de:	6813      	ldr	r3, [r2, #0]
 80038e0:	4615      	mov	r5, r2
 80038e2:	b933      	cbnz	r3, 80038f2 <_free_r+0x32>
 80038e4:	6063      	str	r3, [r4, #4]
 80038e6:	6014      	str	r4, [r2, #0]
 80038e8:	b003      	add	sp, #12
 80038ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038ee:	f000 b8cd 	b.w	8003a8c <__malloc_unlock>
 80038f2:	42a3      	cmp	r3, r4
 80038f4:	d90b      	bls.n	800390e <_free_r+0x4e>
 80038f6:	6821      	ldr	r1, [r4, #0]
 80038f8:	1862      	adds	r2, r4, r1
 80038fa:	4293      	cmp	r3, r2
 80038fc:	bf04      	itt	eq
 80038fe:	681a      	ldreq	r2, [r3, #0]
 8003900:	685b      	ldreq	r3, [r3, #4]
 8003902:	6063      	str	r3, [r4, #4]
 8003904:	bf04      	itt	eq
 8003906:	1852      	addeq	r2, r2, r1
 8003908:	6022      	streq	r2, [r4, #0]
 800390a:	602c      	str	r4, [r5, #0]
 800390c:	e7ec      	b.n	80038e8 <_free_r+0x28>
 800390e:	461a      	mov	r2, r3
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b10b      	cbz	r3, 8003918 <_free_r+0x58>
 8003914:	42a3      	cmp	r3, r4
 8003916:	d9fa      	bls.n	800390e <_free_r+0x4e>
 8003918:	6811      	ldr	r1, [r2, #0]
 800391a:	1855      	adds	r5, r2, r1
 800391c:	42a5      	cmp	r5, r4
 800391e:	d10b      	bne.n	8003938 <_free_r+0x78>
 8003920:	6824      	ldr	r4, [r4, #0]
 8003922:	4421      	add	r1, r4
 8003924:	1854      	adds	r4, r2, r1
 8003926:	42a3      	cmp	r3, r4
 8003928:	6011      	str	r1, [r2, #0]
 800392a:	d1dd      	bne.n	80038e8 <_free_r+0x28>
 800392c:	681c      	ldr	r4, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	6053      	str	r3, [r2, #4]
 8003932:	4421      	add	r1, r4
 8003934:	6011      	str	r1, [r2, #0]
 8003936:	e7d7      	b.n	80038e8 <_free_r+0x28>
 8003938:	d902      	bls.n	8003940 <_free_r+0x80>
 800393a:	230c      	movs	r3, #12
 800393c:	6003      	str	r3, [r0, #0]
 800393e:	e7d3      	b.n	80038e8 <_free_r+0x28>
 8003940:	6825      	ldr	r5, [r4, #0]
 8003942:	1961      	adds	r1, r4, r5
 8003944:	428b      	cmp	r3, r1
 8003946:	bf04      	itt	eq
 8003948:	6819      	ldreq	r1, [r3, #0]
 800394a:	685b      	ldreq	r3, [r3, #4]
 800394c:	6063      	str	r3, [r4, #4]
 800394e:	bf04      	itt	eq
 8003950:	1949      	addeq	r1, r1, r5
 8003952:	6021      	streq	r1, [r4, #0]
 8003954:	6054      	str	r4, [r2, #4]
 8003956:	e7c7      	b.n	80038e8 <_free_r+0x28>
 8003958:	b003      	add	sp, #12
 800395a:	bd30      	pop	{r4, r5, pc}
 800395c:	200000d4 	.word	0x200000d4

08003960 <_malloc_r>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	1ccd      	adds	r5, r1, #3
 8003964:	f025 0503 	bic.w	r5, r5, #3
 8003968:	3508      	adds	r5, #8
 800396a:	2d0c      	cmp	r5, #12
 800396c:	bf38      	it	cc
 800396e:	250c      	movcc	r5, #12
 8003970:	2d00      	cmp	r5, #0
 8003972:	4606      	mov	r6, r0
 8003974:	db01      	blt.n	800397a <_malloc_r+0x1a>
 8003976:	42a9      	cmp	r1, r5
 8003978:	d903      	bls.n	8003982 <_malloc_r+0x22>
 800397a:	230c      	movs	r3, #12
 800397c:	6033      	str	r3, [r6, #0]
 800397e:	2000      	movs	r0, #0
 8003980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003982:	f000 f87d 	bl	8003a80 <__malloc_lock>
 8003986:	4921      	ldr	r1, [pc, #132]	; (8003a0c <_malloc_r+0xac>)
 8003988:	680a      	ldr	r2, [r1, #0]
 800398a:	4614      	mov	r4, r2
 800398c:	b99c      	cbnz	r4, 80039b6 <_malloc_r+0x56>
 800398e:	4f20      	ldr	r7, [pc, #128]	; (8003a10 <_malloc_r+0xb0>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b923      	cbnz	r3, 800399e <_malloc_r+0x3e>
 8003994:	4621      	mov	r1, r4
 8003996:	4630      	mov	r0, r6
 8003998:	f000 f862 	bl	8003a60 <_sbrk_r>
 800399c:	6038      	str	r0, [r7, #0]
 800399e:	4629      	mov	r1, r5
 80039a0:	4630      	mov	r0, r6
 80039a2:	f000 f85d 	bl	8003a60 <_sbrk_r>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	d123      	bne.n	80039f2 <_malloc_r+0x92>
 80039aa:	230c      	movs	r3, #12
 80039ac:	6033      	str	r3, [r6, #0]
 80039ae:	4630      	mov	r0, r6
 80039b0:	f000 f86c 	bl	8003a8c <__malloc_unlock>
 80039b4:	e7e3      	b.n	800397e <_malloc_r+0x1e>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	1b5b      	subs	r3, r3, r5
 80039ba:	d417      	bmi.n	80039ec <_malloc_r+0x8c>
 80039bc:	2b0b      	cmp	r3, #11
 80039be:	d903      	bls.n	80039c8 <_malloc_r+0x68>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	441c      	add	r4, r3
 80039c4:	6025      	str	r5, [r4, #0]
 80039c6:	e004      	b.n	80039d2 <_malloc_r+0x72>
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	42a2      	cmp	r2, r4
 80039cc:	bf0c      	ite	eq
 80039ce:	600b      	streq	r3, [r1, #0]
 80039d0:	6053      	strne	r3, [r2, #4]
 80039d2:	4630      	mov	r0, r6
 80039d4:	f000 f85a 	bl	8003a8c <__malloc_unlock>
 80039d8:	f104 000b 	add.w	r0, r4, #11
 80039dc:	1d23      	adds	r3, r4, #4
 80039de:	f020 0007 	bic.w	r0, r0, #7
 80039e2:	1ac2      	subs	r2, r0, r3
 80039e4:	d0cc      	beq.n	8003980 <_malloc_r+0x20>
 80039e6:	1a1b      	subs	r3, r3, r0
 80039e8:	50a3      	str	r3, [r4, r2]
 80039ea:	e7c9      	b.n	8003980 <_malloc_r+0x20>
 80039ec:	4622      	mov	r2, r4
 80039ee:	6864      	ldr	r4, [r4, #4]
 80039f0:	e7cc      	b.n	800398c <_malloc_r+0x2c>
 80039f2:	1cc4      	adds	r4, r0, #3
 80039f4:	f024 0403 	bic.w	r4, r4, #3
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	d0e3      	beq.n	80039c4 <_malloc_r+0x64>
 80039fc:	1a21      	subs	r1, r4, r0
 80039fe:	4630      	mov	r0, r6
 8003a00:	f000 f82e 	bl	8003a60 <_sbrk_r>
 8003a04:	3001      	adds	r0, #1
 8003a06:	d1dd      	bne.n	80039c4 <_malloc_r+0x64>
 8003a08:	e7cf      	b.n	80039aa <_malloc_r+0x4a>
 8003a0a:	bf00      	nop
 8003a0c:	200000d4 	.word	0x200000d4
 8003a10:	200000d8 	.word	0x200000d8

08003a14 <_realloc_r>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	4607      	mov	r7, r0
 8003a18:	4614      	mov	r4, r2
 8003a1a:	460e      	mov	r6, r1
 8003a1c:	b921      	cbnz	r1, 8003a28 <_realloc_r+0x14>
 8003a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a22:	4611      	mov	r1, r2
 8003a24:	f7ff bf9c 	b.w	8003960 <_malloc_r>
 8003a28:	b922      	cbnz	r2, 8003a34 <_realloc_r+0x20>
 8003a2a:	f7ff ff49 	bl	80038c0 <_free_r>
 8003a2e:	4625      	mov	r5, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a34:	f000 f830 	bl	8003a98 <_malloc_usable_size_r>
 8003a38:	42a0      	cmp	r0, r4
 8003a3a:	d20f      	bcs.n	8003a5c <_realloc_r+0x48>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f7ff ff8e 	bl	8003960 <_malloc_r>
 8003a44:	4605      	mov	r5, r0
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d0f2      	beq.n	8003a30 <_realloc_r+0x1c>
 8003a4a:	4631      	mov	r1, r6
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	f7ff ff0f 	bl	8003870 <memcpy>
 8003a52:	4631      	mov	r1, r6
 8003a54:	4638      	mov	r0, r7
 8003a56:	f7ff ff33 	bl	80038c0 <_free_r>
 8003a5a:	e7e9      	b.n	8003a30 <_realloc_r+0x1c>
 8003a5c:	4635      	mov	r5, r6
 8003a5e:	e7e7      	b.n	8003a30 <_realloc_r+0x1c>

08003a60 <_sbrk_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4d06      	ldr	r5, [pc, #24]	; (8003a7c <_sbrk_r+0x1c>)
 8003a64:	2300      	movs	r3, #0
 8003a66:	4604      	mov	r4, r0
 8003a68:	4608      	mov	r0, r1
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	f7fc fff0 	bl	8000a50 <_sbrk>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d102      	bne.n	8003a7a <_sbrk_r+0x1a>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	b103      	cbz	r3, 8003a7a <_sbrk_r+0x1a>
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
 8003a7c:	20000180 	.word	0x20000180

08003a80 <__malloc_lock>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__malloc_lock+0x8>)
 8003a82:	f000 b811 	b.w	8003aa8 <__retarget_lock_acquire_recursive>
 8003a86:	bf00      	nop
 8003a88:	20000188 	.word	0x20000188

08003a8c <__malloc_unlock>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <__malloc_unlock+0x8>)
 8003a8e:	f000 b80c 	b.w	8003aaa <__retarget_lock_release_recursive>
 8003a92:	bf00      	nop
 8003a94:	20000188 	.word	0x20000188

08003a98 <_malloc_usable_size_r>:
 8003a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a9c:	1f18      	subs	r0, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bfbc      	itt	lt
 8003aa2:	580b      	ldrlt	r3, [r1, r0]
 8003aa4:	18c0      	addlt	r0, r0, r3
 8003aa6:	4770      	bx	lr

08003aa8 <__retarget_lock_acquire_recursive>:
 8003aa8:	4770      	bx	lr

08003aaa <__retarget_lock_release_recursive>:
 8003aaa:	4770      	bx	lr

08003aac <_init>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr

08003ab8 <_fini>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr
